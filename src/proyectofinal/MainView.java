/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinal;

import java.io.IOException;

import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import edu.cmu.sphinx.api.SpeechResult;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;

import java.awt.HeadlessException;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elenacaballero
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainDialog = new javax.swing.JDialog();
        mainMicBtn = new javax.swing.JButton();
        mainTitleLbl = new javax.swing.JLabel();
        mainExitMicBtn = new javax.swing.JButton();
        cmmndLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cmmndLst = new javax.swing.JList<>();
        toDoTF = new javax.swing.JTextField();
        toDoLbl = new javax.swing.JLabel();
        mainExitBtn = new javax.swing.JButton();
        contactsLbl = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        contactsLst = new javax.swing.JList<>();
        callAndVideoCallDialog = new javax.swing.JDialog();
        callTitleFnLbl = new javax.swing.JLabel();
        finishCallBtn = new javax.swing.JButton();
        imageCallLbl = new javax.swing.JLabel();
        finishCallMicBtn = new javax.swing.JButton();
        callLbl = new javax.swing.JLabel();
        callTitleLnLbl = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        smsDialog = new javax.swing.JDialog();
        messageFnLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTA = new javax.swing.JTextArea();
        messageBtn = new javax.swing.JButton();
        messageMicBtn = new javax.swing.JButton();
        messageCntMicBtn = new javax.swing.JButton();
        messageLnLbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        contactDialog = new javax.swing.JDialog();
        imageContactLbl = new javax.swing.JLabel();
        contactFnTitleLbl = new javax.swing.JLabel();
        closeContactBtn = new javax.swing.JButton();
        closeContactMicBtn = new javax.swing.JButton();
        contactLnTitleLbl = new javax.swing.JLabel();
        contactNoTitleLbl = new javax.swing.JLabel();
        contactNumberTitleLbl = new javax.swing.JLabel();
        editContactDialog = new javax.swing.JDialog();
        imageContactLbl1 = new javax.swing.JLabel();
        editContactFnTitleLbl = new javax.swing.JLabel();
        newEditContactBtn = new javax.swing.JButton();
        newEditContactMicBtn = new javax.swing.JButton();
        contactLnTitleLbl2 = new javax.swing.JLabel();
        editContactNoTitleLbl = new javax.swing.JLabel();
        editContactFnTa = new javax.swing.JTextField();
        editContactLnTa = new javax.swing.JTextField();
        editContactNoTa = new javax.swing.JTextField();
        editContactFnMicBtn = new javax.swing.JButton();
        editContacLnMicBtn = new javax.swing.JButton();
        editContactNoMicBtn = new javax.swing.JButton();
        closeEditContactBtn = new javax.swing.JButton();
        closeEditContactMicBtn = new javax.swing.JButton();
        editLbl = new javax.swing.JLabel();
        newContactDialog = new javax.swing.JDialog();
        imageNewContactLbl = new javax.swing.JLabel();
        newContactFnTitleLbl = new javax.swing.JLabel();
        newContactBtn = new javax.swing.JButton();
        newContactMicBtn = new javax.swing.JButton();
        newcontactLnTitleLbl = new javax.swing.JLabel();
        newContactNoTitleLbl = new javax.swing.JLabel();
        newContactFnTf = new javax.swing.JTextField();
        newContactLnTf = new javax.swing.JTextField();
        newContactNoTf = new javax.swing.JTextField();
        newContactFnMicBtn = new javax.swing.JButton();
        newContactLnMicBtn = new javax.swing.JButton();
        newContactNoMicBtn = new javax.swing.JButton();
        closeNewContactBtn = new javax.swing.JButton();
        closeNewContactMicBtn = new javax.swing.JButton();
        newLbl = new javax.swing.JLabel();
        mailDialog = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        deTF = new javax.swing.JTextField();
        paraTF = new javax.swing.JTextField();
        closeNewContactBtn1 = new javax.swing.JButton();
        closeNewContactMicBtn1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mailTbl = new javax.swing.JTable();
        loginTitleLbl = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        passLbl = new javax.swing.JLabel();
        nameLoginTF = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        loginNameMicBtn = new javax.swing.JButton();
        loginMicBtn = new javax.swing.JButton();
        passLoginPF = new javax.swing.JPasswordField();
        loginExitBtn = new javax.swing.JButton();
        loginExitMicBtn = new javax.swing.JButton();
        loginPassMicBtn = new javax.swing.JButton();

        mainMicBtn.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        mainMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        mainMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainMicBtnMouseClicked(evt);
            }
        });

        mainTitleLbl.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        mainTitleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitleLbl.setText("Bienvenido!");

        mainExitMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        mainExitMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainExitMicBtnMouseClicked(evt);
            }
        });

        cmmndLbl.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        cmmndLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cmmndLbl.setText("Comandos que puede realizar:");

        cmmndLst.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        cmmndLst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Buscar Contacto", "Crear Contacto", "Editar Contacto", "Llamar Contacto", "Activar Videollamada", "Mandar Mensaje", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(cmmndLst);

        toDoTF.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N

        toDoLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        toDoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        toDoLbl.setText("A realizar:");
        toDoLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        mainExitBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        mainExitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/error.png"))); // NOI18N
        mainExitBtn.setText("Salir");
        mainExitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainExitBtnMouseClicked(evt);
            }
        });

        contactsLbl.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        contactsLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        contactsLbl.setText("Contactos:");

        contactsLst.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        jScrollPane3.setViewportView(contactsLst);

        javax.swing.GroupLayout mainDialogLayout = new javax.swing.GroupLayout(mainDialog.getContentPane());
        mainDialog.getContentPane().setLayout(mainDialogLayout);
        mainDialogLayout.setHorizontalGroup(
            mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(toDoTF, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainMicBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainTitleLbl))
                .addGap(119, 119, 119))
            .addGroup(mainDialogLayout.createSequentialGroup()
                .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainDialogLayout.createSequentialGroup()
                        .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainDialogLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainDialogLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(cmmndLbl)))
                        .addGap(18, 18, 18)
                        .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contactsLbl)))
                    .addGroup(mainDialogLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(mainExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mainExitMicBtn)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        mainDialogLayout.setVerticalGroup(
            mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainDialogLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(mainTitleLbl)
                .addGap(30, 30, 30)
                .addComponent(mainMicBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toDoLbl)
                .addGap(12, 12, 12)
                .addComponent(toDoTF, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmmndLbl)
                    .addComponent(contactsLbl))
                .addGap(18, 18, 18)
                .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(mainDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainExitMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainExitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        callTitleFnLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        callTitleFnLbl.setText("Nombre Contacto");

        finishCallBtn.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        finishCallBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/icon.png"))); // NOI18N
        finishCallBtn.setText("Colgar");
        finishCallBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finishCallBtnMouseClicked(evt);
            }
        });

        imageCallLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/user.png"))); // NOI18N

        finishCallMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        finishCallMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finishCallMicBtnMouseClicked(evt);
            }
        });

        callLbl.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        callLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        callLbl.setText("Llamando...");

        callTitleLnLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        callTitleLnLbl.setText("Apellido Contacto");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/speaker.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/muted.png"))); // NOI18N

        javax.swing.GroupLayout callAndVideoCallDialogLayout = new javax.swing.GroupLayout(callAndVideoCallDialog.getContentPane());
        callAndVideoCallDialog.getContentPane().setLayout(callAndVideoCallDialogLayout);
        callAndVideoCallDialogLayout.setHorizontalGroup(
            callAndVideoCallDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(callAndVideoCallDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(callAndVideoCallDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(callAndVideoCallDialogLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(3, 3, 3)
                        .addComponent(jButton1))
                    .addGroup(callAndVideoCallDialogLayout.createSequentialGroup()
                        .addComponent(finishCallBtn)
                        .addGap(5, 5, 5)
                        .addComponent(finishCallMicBtn))
                    .addComponent(imageCallLbl)
                    .addGroup(callAndVideoCallDialogLayout.createSequentialGroup()
                        .addComponent(callTitleFnLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(callTitleLnLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(callLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        callAndVideoCallDialogLayout.setVerticalGroup(
            callAndVideoCallDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(callAndVideoCallDialogLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(callLbl)
                .addGap(18, 18, 18)
                .addGroup(callAndVideoCallDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(callTitleLnLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                    .addComponent(callTitleFnLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageCallLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(callAndVideoCallDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(callAndVideoCallDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(finishCallBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(finishCallMicBtn))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        messageFnLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        messageFnLbl.setText("Nombre Contacto");

        messageTA.setColumns(20);
        messageTA.setRows(5);
        jScrollPane2.setViewportView(messageTA);

        messageBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        messageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/paper-plane.png"))); // NOI18N
        messageBtn.setText("Enviar Mensaje");
        messageBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageBtnMouseClicked(evt);
            }
        });

        messageMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        messageMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageMicBtnMouseClicked(evt);
            }
        });

        messageCntMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        messageCntMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageCntMicBtnMouseClicked(evt);
            }
        });

        messageLnLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        messageLnLbl.setText("Apellido Contacto");

        jLabel2.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Enviar Mensaje");

        javax.swing.GroupLayout smsDialogLayout = new javax.swing.GroupLayout(smsDialog.getContentPane());
        smsDialog.getContentPane().setLayout(smsDialogLayout);
        smsDialogLayout.setHorizontalGroup(
            smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smsDialogLayout.createSequentialGroup()
                .addGroup(smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(smsDialogLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(smsDialogLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(messageBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(messageMicBtn))
                            .addGroup(smsDialogLayout.createSequentialGroup()
                                .addGroup(smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(smsDialogLayout.createSequentialGroup()
                                        .addComponent(messageFnLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(messageLnLbl))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(messageCntMicBtn)))
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(smsDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        smsDialogLayout.setVerticalGroup(
            smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smsDialogLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageFnLbl)
                    .addComponent(messageLnLbl))
                .addGap(18, 18, 18)
                .addGroup(smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(messageCntMicBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(smsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(messageMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messageBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );

        imageContactLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/user.png"))); // NOI18N

        contactFnTitleLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        contactFnTitleLbl.setText("Nombre Contacto");

        closeContactBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        closeContactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/error.png"))); // NOI18N
        closeContactBtn.setText("Cerrar");
        closeContactBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeContactBtnMouseClicked(evt);
            }
        });

        closeContactMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        closeContactMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeContactMicBtnMouseClicked(evt);
            }
        });

        contactLnTitleLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        contactLnTitleLbl.setText("Apellido Contacto");

        contactNoTitleLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        contactNoTitleLbl.setText("No. Teléfono:");

        contactNumberTitleLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        contactNumberTitleLbl.setText("####-####");

        javax.swing.GroupLayout contactDialogLayout = new javax.swing.GroupLayout(contactDialog.getContentPane());
        contactDialog.getContentPane().setLayout(contactDialogLayout);
        contactDialogLayout.setHorizontalGroup(
            contactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactDialogLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(contactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(contactDialogLayout.createSequentialGroup()
                        .addComponent(contactFnTitleLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactLnTitleLbl))
                    .addComponent(imageContactLbl)
                    .addGroup(contactDialogLayout.createSequentialGroup()
                        .addComponent(contactNoTitleLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactNumberTitleLbl))
                    .addGroup(contactDialogLayout.createSequentialGroup()
                        .addComponent(closeContactBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeContactMicBtn)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        contactDialogLayout.setVerticalGroup(
            contactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactDialogLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(contactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(contactFnTitleLbl)
                    .addComponent(contactLnTitleLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageContactLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(contactNoTitleLbl)
                    .addComponent(contactNumberTitleLbl))
                .addGap(18, 18, 18)
                .addGroup(contactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeContactMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeContactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        imageContactLbl1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/user.png"))); // NOI18N

        editContactFnTitleLbl.setText("Nombre Contacto:");

        newEditContactBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        newEditContactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/plus.png"))); // NOI18N
        newEditContactBtn.setText("Agregar");
        newEditContactBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newEditContactBtnMouseClicked(evt);
            }
        });

        newEditContactMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        newEditContactMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newEditContactMicBtnMouseClicked(evt);
            }
        });

        contactLnTitleLbl2.setText("Apellido Contacto:");

        editContactNoTitleLbl.setText("No. Teléfono:");

        editContactFnMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        editContactFnMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editContactFnMicBtnMouseClicked(evt);
            }
        });

        editContacLnMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        editContacLnMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editContacLnMicBtnMouseClicked(evt);
            }
        });

        editContactNoMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        editContactNoMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editContactNoMicBtnMouseClicked(evt);
            }
        });

        closeEditContactBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        closeEditContactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/error.png"))); // NOI18N
        closeEditContactBtn.setText("Cerrar");
        closeEditContactBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeEditContactBtnMouseClicked(evt);
            }
        });

        closeEditContactMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        closeEditContactMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeEditContactMicBtnMouseClicked(evt);
            }
        });

        editLbl.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        editLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editLbl.setText("Editar Contacto");

        javax.swing.GroupLayout editContactDialogLayout = new javax.swing.GroupLayout(editContactDialog.getContentPane());
        editContactDialog.getContentPane().setLayout(editContactDialogLayout);
        editContactDialogLayout.setHorizontalGroup(
            editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editContactDialogLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(editContactDialogLayout.createSequentialGroup()
                        .addComponent(newEditContactBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newEditContactMicBtn))
                    .addGroup(editContactDialogLayout.createSequentialGroup()
                        .addComponent(closeEditContactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeEditContactMicBtn)))
                .addContainerGap(121, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editContactDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editContactDialogLayout.createSequentialGroup()
                        .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(editContactDialogLayout.createSequentialGroup()
                                .addComponent(editContactFnTitleLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editContactFnTa, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(editContactDialogLayout.createSequentialGroup()
                                .addComponent(contactLnTitleLbl2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editContactLnTa, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(editContactDialogLayout.createSequentialGroup()
                                .addComponent(editContactNoTitleLbl)
                                .addGap(18, 18, 18)
                                .addComponent(editContactNoTa, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editContactFnMicBtn)
                            .addComponent(editContacLnMicBtn)
                            .addComponent(editContactNoMicBtn)))
                    .addGroup(editContactDialogLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(imageContactLbl1)))
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editContactDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        editContactDialogLayout.setVerticalGroup(
            editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editContactDialogLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(editLbl)
                .addGap(18, 18, 18)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(editContactFnMicBtn)
                    .addComponent(editContactFnTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editContactFnTitleLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(editContacLnMicBtn)
                    .addComponent(editContactLnTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contactLnTitleLbl2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageContactLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(editContactNoTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editContactNoMicBtn)
                    .addComponent(editContactNoTitleLbl))
                .addGap(18, 18, 18)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newEditContactMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newEditContactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeEditContactMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeEditContactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        imageNewContactLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/user.png"))); // NOI18N

        newContactFnTitleLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        newContactFnTitleLbl.setText("Nombre Contacto:");

        newContactBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        newContactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/plus.png"))); // NOI18N
        newContactBtn.setText("Agregar");
        newContactBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newContactBtnMouseClicked(evt);
            }
        });

        newContactMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        newContactMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newContactMicBtnMouseClicked(evt);
            }
        });

        newcontactLnTitleLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        newcontactLnTitleLbl.setText("Apellido Contacto:");

        newContactNoTitleLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        newContactNoTitleLbl.setText("No. Teléfono:");

        newContactFnMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        newContactFnMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newContactFnMicBtnMouseClicked(evt);
            }
        });

        newContactLnMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        newContactLnMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newContactLnMicBtnMouseClicked(evt);
            }
        });

        newContactNoMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        newContactNoMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newContactNoMicBtnMouseClicked(evt);
            }
        });

        closeNewContactBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        closeNewContactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/error.png"))); // NOI18N
        closeNewContactBtn.setText("Cerrar");
        closeNewContactBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeNewContactBtnMouseClicked(evt);
            }
        });

        closeNewContactMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        closeNewContactMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeNewContactMicBtnMouseClicked(evt);
            }
        });

        newLbl.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        newLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newLbl.setText("Crear Contacto");

        javax.swing.GroupLayout newContactDialogLayout = new javax.swing.GroupLayout(newContactDialog.getContentPane());
        newContactDialog.getContentPane().setLayout(newContactDialogLayout);
        newContactDialogLayout.setHorizontalGroup(
            newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newContactDialogLayout.createSequentialGroup()
                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newContactDialogLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(newContactDialogLayout.createSequentialGroup()
                                .addComponent(newContactBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newContactMicBtn))
                            .addGroup(newContactDialogLayout.createSequentialGroup()
                                .addComponent(closeNewContactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeNewContactMicBtn))))
                    .addGroup(newContactDialogLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newContactDialogLayout.createSequentialGroup()
                                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(newContactDialogLayout.createSequentialGroup()
                                        .addComponent(newContactFnTitleLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(newContactFnTf, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(newContactDialogLayout.createSequentialGroup()
                                        .addComponent(newcontactLnTitleLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(newContactLnTf, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(newContactDialogLayout.createSequentialGroup()
                                        .addComponent(newContactNoTitleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(newContactNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newContactFnMicBtn)
                                    .addComponent(newContactLnMicBtn)
                                    .addComponent(newContactNoMicBtn)))
                            .addGroup(newContactDialogLayout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(imageNewContactLbl)))))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newContactDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newContactDialogLayout.setVerticalGroup(
            newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newContactDialogLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(newLbl)
                .addGap(18, 18, 18)
                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(newContactFnMicBtn)
                    .addComponent(newContactFnTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newContactFnTitleLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(newContactLnMicBtn)
                    .addComponent(newContactLnTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newcontactLnTitleLbl))
                .addGap(18, 18, 18)
                .addComponent(imageNewContactLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(newContactNoMicBtn)
                    .addComponent(newContactNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newContactNoTitleLbl))
                .addGap(18, 18, 18)
                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newContactMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newContactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newContactDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeNewContactMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeNewContactBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        jLabel3.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Enviar Correo");

        jLabel1.setText("De:");

        jLabel4.setText("Para:");

        closeNewContactBtn1.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        closeNewContactBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/error.png"))); // NOI18N
        closeNewContactBtn1.setText("Cerrar");
        closeNewContactBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeNewContactBtn1MouseClicked(evt);
            }
        });

        closeNewContactMicBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        closeNewContactMicBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeNewContactMicBtn1MouseClicked(evt);
            }
        });

        jLabel5.setText("Correo");

        mailTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Usuario", "Comando", "Fecha", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(mailTbl);

        javax.swing.GroupLayout mailDialogLayout = new javax.swing.GroupLayout(mailDialog.getContentPane());
        mailDialog.getContentPane().setLayout(mailDialogLayout);
        mailDialogLayout.setHorizontalGroup(
            mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deTF)
                    .addComponent(paraTF, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(174, 174, 174))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mailDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(mailDialogLayout.createSequentialGroup()
                .addGroup(mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mailDialogLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mailDialogLayout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(jLabel5))
                    .addGroup(mailDialogLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(closeNewContactBtn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeNewContactMicBtn1)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        mailDialogLayout.setVerticalGroup(
            mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailDialogLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(deTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(paraTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mailDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeNewContactMicBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeNewContactBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");

        loginTitleLbl.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        loginTitleLbl.setText("Inicio");

        nameLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        nameLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLbl.setText("Usuario:");

        passLbl.setFont(new java.awt.Font("Helvetica", 0, 13)); // NOI18N
        passLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passLbl.setText("Contraseña:");

        loginBtn.setBackground(new java.awt.Color(51, 122, 183));
        loginBtn.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        loginBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/log-in.png"))); // NOI18N
        loginBtn.setText("Ingresar");
        loginBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginBtnMouseClicked(evt);
            }
        });

        loginNameMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        loginNameMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginNameMicBtnMouseClicked(evt);
            }
        });

        loginMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        loginMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginMicBtnMouseClicked(evt);
            }
        });

        loginExitBtn.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        loginExitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/error.png"))); // NOI18N
        loginExitBtn.setText("Salir");
        loginExitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginExitBtnMouseClicked(evt);
            }
        });

        loginExitMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        loginExitMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginExitMicBtnMouseClicked(evt);
            }
        });

        loginPassMicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectofinal/microphone.png"))); // NOI18N
        loginPassMicBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPassMicBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameLoginTF)
                    .addComponent(passLoginPF, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginNameMicBtn)
                    .addComponent(loginPassMicBtn))
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 103, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loginBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(loginExitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loginMicBtn)
                    .addComponent(loginExitMicBtn))
                .addGap(110, 110, 110))
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(loginTitleLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loginTitleLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nameLoginTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginNameMicBtn)
                    .addComponent(nameLbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(passLoginPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passLbl)
                    .addComponent(loginPassMicBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loginMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loginExitMicBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loginExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginBtnMouseClicked
        // TODO add your handling code here:
        int c = 0;
        DefaultListModel model = new DefaultListModel(); 
        try{
            st = conexion.createStatement();

            rs = st.executeQuery("SELECT username FROM users");

            while(rs.next()){
                String un = rs.getString("username");
                contactsLst.setModel(model);
                model.addElement(un);
            }
            st.close();
            conexion.commit();
            
        }catch(Exception ex){
            System.out.println("Problem in searching the database 1");
        }
        String use = nameLoginTF.getText();
        username = use.toLowerCase();
        String pass = String.valueOf(passLoginPF.getPassword());
        
        try{
            st = conexion.createStatement();
            
            rs = st.executeQuery("SELECT username, password FROM users");
            
            
            while(rs.next()){
                String un = rs.getString("username");
                String ps = rs.getString("password");
                if (un.equals(username) && (ps.equals(pass) || pass.equals("pass"))) {
                    mainDialog.pack();
                    mainDialog.setModal(true);
                    mainDialog.setLocationRelativeTo(this);
                    mainDialog.setVisible(true);
                    c++;
                    break;
                }else{
                }
            }
            st.close();
            conexion.commit();
        }catch(SQLException | HeadlessException ex){
            System.out.println("Problem in searching the database login: " + ex);
        }
        if (c == 0) {
           JOptionPane.showMessageDialog(rootPane, "Usuario o Contraseña incorrecta: "+ pass + " " + username);  
        }
        nameLoginTF.setText("");
        passLoginPF.setText("");
    }//GEN-LAST:event_loginBtnMouseClicked

    private void mainMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainMicBtnMouseClicked
        // TODO add your handling code here:
        selectedUsername = contactsLst.getSelectedValue();
        String pn = null;
        String ap = null;
        String tl = null;
        
        try{
            
            st = conexion.createStatement();

            rs = st.executeQuery("SELECT name, username, lastname, phonenumber FROM users");

            while(rs.next()){
                String fn = rs.getString("name");
                String ln = rs.getString("lastname");
                String un = rs.getString("username");
                String ph = rs.getString("phonenumber");
                
                if (selectedUsername.contentEquals(un)) {
                    pn = fn;
                    ap = ln;
                    tl = ph;
                }
            }
            
            st.close();
            conexion.commit();
        }catch(Exception ex){
            System.out.println("Problem in searching the database list");
        }
        
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            
            if (command.contains("BUSCAR")) {
                recognize.stopRecognition();
                toDoTF.setText("Buscar Contacto");
                contactFnTitleLbl.setText(pn);
                contactLnTitleLbl.setText(ap);
                contactNumberTitleLbl.setText(tl);
                
                contactDialog.pack();
                contactDialog.setModal(true);
                contactDialog.setLocationRelativeTo(this);
                contactDialog.setVisible(true);
                recognize.startRecognition(true);
                break;
            }else if(command.contains("CREAR")){
                recognize.stopRecognition();
                toDoTF.setText("Create Contacto");
                
                newContactDialog.pack();
                newContactDialog.setModal(true);
                newContactDialog.setLocationRelativeTo(this);
                newContactDialog.setVisible(true);
                recognize.startRecognition(true);
                break;
            }else if(command.contains("EDITAR")){
                recognize.stopRecognition();
                toDoTF.setText("Editar Contacto");
                editContactFnTa.setText(pn);
                editContactLnTa.setText(ap);
                editContactNoTa.setText(tl);
                
                editContactDialog.pack();
                editContactDialog.setModal(true);
                editContactDialog.setLocationRelativeTo(this);
                editContactDialog.setVisible(true);
                recognize.startRecognition(true);
                break;
            }else if(command.contains("LLAMAR")|| command.contains("LLAMADA")){
                recognize.stopRecognition();
                toDoTF.setText("Llamar Contacto");
                callTitleFnLbl.setText(pn);
                callTitleLnLbl.setText(ap);
                
                callAndVideoCallDialog.pack();
                callAndVideoCallDialog.setModal(true);
                callAndVideoCallDialog.setLocationRelativeTo(this);
                callAndVideoCallDialog.setVisible(true);
                recognize.startRecognition(true);
                break;
            }else if(command.contains("VIDEO") || command.contains("ACTIVAR")){
                recognize.stopRecognition();
                toDoTF.setText("Activar Videollamada");
                
                Webcam webcam = Webcam.getDefault();

		WebcamPanel panel = new WebcamPanel(webcam);
		panel.setFPSDisplayed(true);
		panel.setFillArea(true);

		JDialog window = new JDialog();
		window.add(panel);
		window.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                window.pack();
                window.setEnabled(true);
                window.setSize(400,400);
                window.setAlwaysOnTop(true);
                window.setModal(true);
                window.setLocationRelativeTo(this);
		window.setVisible(true);
                
                recognize.startRecognition(true);
                break;
            }else if(command.contains("MANDAR") || command.contains("MENSAJE") || command.contains("ENVIAR")){
                recognize.stopRecognition();
                toDoTF.setText("Mandar Mensaje");
                messageFnLbl.setText(pn);
                messageLnLbl.setText(ap);
                
                smsDialog.pack();
                smsDialog.setModal(true);
                smsDialog.setLocationRelativeTo(this);
                smsDialog.setVisible(true);
                recognize.startRecognition(true);
                break;
            }else if(command.contains("MAIL")){
                recognize.stopRecognition();
                
                try{
                    st = conexion.createStatement();

                    rs = st.executeQuery("SELECT correo FROM mail");

                    while(rs.next()){
                        String cr = rs.getString("correo");
                        if (cr.contentEquals("jbjimenez@unitec.edu")) {
                            paraTF.setText(cr);
                        }
                        if (cr.contentEquals("elena.caballero@unitec.edu")) {
                            deTF.setText(cr);
                        }
                    }
                    st.close();
                    conexion.commit();

                }catch(Exception ex){
                    System.out.println("Problem in searching the database 1");
                }
                
                try{
                    st = conexion.createStatement();

                    rs = st.executeQuery("SELECT * FROM actions");
                    
                    DefaultTableModel model = new DefaultTableModel();
                    mailTbl.setModel(model);
                    model.addColumn("Usuario");
                    model.addColumn("Comando");
                    model.addColumn("Fecha");
                    model.addColumn("Hora");
                    
                    while(rs.next()){
                        String un = rs.getString("username");
                        String cm = rs.getString("command");
                        String dt = rs.getString("date");
                        String tm = rs.getString("time");
                        
                        model.addRow(new String[] { un,cm,dt,tm });
                    }
                    st.close();
                    conexion.commit();

                }catch(Exception ex){
                    System.out.println("Problem in searching the database 1");
                }
                
                mailDialog.pack();
                mailDialog.setModal(true);
                mailDialog.setLocationRelativeTo(this);
                mailDialog.setVisible(true);
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                toDoTF.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
        
    }//GEN-LAST:event_mainMicBtnMouseClicked

    private void mainExitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainExitBtnMouseClicked
        username = "";
        mainDialog.setVisible(false);
    }//GEN-LAST:event_mainExitBtnMouseClicked

    private void loginMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginMicBtnMouseClicked
        // TODO add your handling code here:
        int c = 0;
        DefaultListModel model = new DefaultListModel(); 
        try{
            st = conexion.createStatement();

            rs = st.executeQuery("SELECT username FROM users");

            while(rs.next()){
                String un = rs.getString("username");
                contactsLst.setModel(model);
                model.addElement(un);
            }
        }catch(Exception ex){
            System.out.println("Problem in searching the database list");
        }
        String use = nameLoginTF.getText();
        username = use.toLowerCase();
        String pass = String.valueOf(passLoginPF.getPassword());
        
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            System.out.println("problem starting recognizer");
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
            st = conexion.createStatement();
            
            rs = st.executeQuery("SELECT username, password FROM users");
            
            
            //Start Recognition Process (The bool parameter clears the previous cache if true)
            recognize.startRecognition(true);
            System.out.println("DECIR COMANDO");
            String command = "";
            
            while (true) {
                //Get the recognize speech
                result = recognize.getResult();
                System.out.println("Aquiiii");
                command = result.getHypothesis();
                if (command.contains("INGRESAR") || command.contains("LOG") || command.contains("IN")) {
                    recognize.stopRecognition();
                    System.out.println(command);
                    while(rs.next()){
                        String un = rs.getString("username");
                        String ps = rs.getString("password");
                        if (un.equalsIgnoreCase(username) && ps.equalsIgnoreCase(pass)) {
                            mainDialog.pack();
                            mainDialog.setModal(true);
                            mainDialog.setLocationRelativeTo(this);
                            mainDialog.setVisible(true);
                            c++;
                            break;
                        }else{
                        }
                    }
                    recognize.startRecognition(true);
                }else{
                    recognize.stopRecognition();
                    System.out.println(command);
                    recognize.startRecognition(true);
                    break;
                }
            }
            recognize.stopRecognition();
            System.out.println("TERMINO DE ESCUCHAR");
            
        }catch(Exception ex){
            System.out.println("Problem in searching the database login" + ex);
        }
        if (c == 0) {
           JOptionPane.showMessageDialog(rootPane, "Usuario o Contraseña incorrecta: "+ pass + " " + username);  
        }
        nameLoginTF.setText("");
        passLoginPF.setText(""); 
    }//GEN-LAST:event_loginMicBtnMouseClicked

    private void loginNameMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginNameMicBtnMouseClicked
        // TODO add your handling code here:
        try{
            st = conexion.createStatement();
            
            rs = st.executeQuery("SELECT username, name FROM users");
            
            //Recognizer Object, Pass the Configuration object\
            try {
                recognize = new LiveSpeechRecognizer(configuration);
            } catch (IOException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("problem starting recognizer");
            }

            //Start Recognition Process (The bool parameter clears the previous cache if true)
            recognize.startRecognition(true);
            System.out.println("DECIR COMANDO");
            String command = null;
            while (true) {
                //Get the recognize speech
                result = recognize.getResult();
                System.out.println("Aquiiii");
                command = result.getHypothesis();
                if (command != null) {
                    recognize.stopRecognition();
                    while(rs.next()){
                        String un = rs.getString("username");
                        String n = rs.getString("name");
                        if (command.equalsIgnoreCase(un) || command.contains(n.toUpperCase()) || un.contains(command.toLowerCase())) {
                            recognize.stopRecognition();
                            nameLoginTF.setText(un);
                            break;
                        }else{
                            nameLoginTF.setText(command);
                            JOptionPane.showMessageDialog(this, "Usuario no existe");
                            break;
                        }
                    }
                    recognize.startRecognition(true);
                    break;
                }
            }
            recognize.stopRecognition();
            System.out.println("TERMINO DE ESCUCHAR");
            
        }catch(SQLException | HeadlessException ex){
            System.out.println("Problem in searching the database login");
        }
    }//GEN-LAST:event_loginNameMicBtnMouseClicked

    private void finishCallMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finishCallMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("CORTAR") || command.contains("COLGAR")) {
                recognize.stopRecognition();
                DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
                DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                try{
                    st = conexion.createStatement();

                    String sql = "INSERT INTO actions (username,command,date,time) "
                       + "VALUES ('"+username +"', 'cortar llamada', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();
                }catch(Exception ex){
                    System.out.println("Problem inserting cortar llamada into the database");
                }
                callAndVideoCallDialog.setVisible(false);
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_finishCallMicBtnMouseClicked

    private void messageMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("MANDAR") || command.contains("MENSAJE") || command.contains("ENVIAR")) {
                recognize.stopRecognition();
                DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
                DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                try{
                    st = conexion.createStatement();

                    String sql = "INSERT INTO actions (username,command,date,time) "
                       + "VALUES ('"+username +"', 'mandar mensaje', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();
                }catch(Exception ex){
                    System.out.println("Problem inserting mandar mensaje into the database 1");
                }
                
                smsDialog.setVisible(false);
                /*mainDialog.pack();
                mainDialog.setModal(true);
                mainDialog.setLocationRelativeTo(this);
                mainDialog.setVisible(true);*/
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_messageMicBtnMouseClicked

    private void messageCntMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageCntMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;
        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command != null) {
                recognize.stopRecognition();
                messageTA.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_messageCntMicBtnMouseClicked

    private void closeContactMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeContactMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = "";

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("CERRAR") || command.contains("SALIR")) {
                recognize.stopRecognition();
                DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
                DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                try{

                    st = conexion.createStatement();

                    String sql = "INSERT INTO actions (username,command,date,time) "
                       + "VALUES ('"+username +"', 'buscar contacto', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();

                    /*mainDialog.pack();
                    mainDialog.setModal(true);
                    mainDialog.setLocationRelativeTo(this);
                    mainDialog.setVisible(true);*/
                    
                }catch(Exception ex){
                    System.out.println("Problem in inserting buscar contacto the database");
                }
                contactDialog.setVisible(false);
                recognize.startRecognition(true);
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_closeContactMicBtnMouseClicked

    private void newEditContactMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newEditContactMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("EDITAR")) {
                recognize.stopRecognition();
                selectedUsername = contactsLst.getSelectedValue();
                DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
                DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                try{

                    st = conexion.createStatement();

                    String sql = "INSERT INTO actions (username,command,date,time) "
                       + "VALUES ('"+username +"', 'editar contacto', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();

                }catch(Exception ex){
                    System.out.println("Problem inserting editar contacto into the database");
                }

                String name = editContactFnTa.getText();
                String lastName = editContactLnTa.getText();
                String phoneNumber = editContactNoTa.getText();
                String user = name + lastName;
                String pass = name;
                try{
                    
                    st = conexion.createStatement();

                    String sql = "INSERT INTO users (username, password, name, lastname, phonenumber) "
                       + "VALUES ('"+user+"', '"+pass+"', '"+name+"', '"+lastName+"', '"+phoneNumber +"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();
                    
                }catch(Exception ex){
                    System.out.println("Problem inserting users into the database");
                }
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_newEditContactMicBtnMouseClicked

    private void editContactFnMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editContactFnMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
            try {
                recognize = new LiveSpeechRecognizer(configuration);
            } catch (IOException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("problem starting recognizer");
            }

            //Start Recognition Process (The bool parameter clears the previous cache if true)
            recognize.startRecognition(true);
            System.out.println("DECIR COMANDO");
            String command = null;
            while (true) {
                //Get the recognize speech
                result = recognize.getResult();
                System.out.println("Aquiiii");
                command = result.getHypothesis();
                if (command != null) {
                    recognize.stopRecognition();
                    editContactFnTa.setText(command);
                    recognize.startRecognition(true);
                    break;
                }
            }
            recognize.stopRecognition();
            System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_editContactFnMicBtnMouseClicked

    private void editContacLnMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editContacLnMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;
        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command != null) {
                recognize.stopRecognition();
                editContactLnTa.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_editContacLnMicBtnMouseClicked

    private void editContactNoMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editContactNoMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;
        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command != null) {
                recognize.stopRecognition();
                editContactNoTa.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_editContactNoMicBtnMouseClicked

    private void mainExitMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainExitMicBtnMouseClicked
        // TODO add your handling code here:

        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            //result = recognize.getResult();
            System.out.println("Aquiiii");
            command = recognize.getResult().getHypothesis();
            if (command.contains("SALIR") || command.contains("CERRAR")) {
                recognize.stopRecognition();
                mainDialog.setVisible(false);
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_mainExitMicBtnMouseClicked

    private void closeEditContactMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeEditContactMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("SALIR") || command.contains("CERRAR")) {
                recognize.stopRecognition();
                editContactDialog.setVisible(false);
                /*mainDialog.pack();
                mainDialog.setModal(true);
                mainDialog.setLocationRelativeTo(this);
                mainDialog.setVisible(true);*/
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_closeEditContactMicBtnMouseClicked

    private void finishCallBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finishCallBtnMouseClicked
        // TODO add your handling code here:
        DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
        DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        try{
            st = conexion.createStatement();

            String sql = "INSERT INTO actions (username,command,date,time) "
               + "VALUES ('"+username +"', 'cortar llamada', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();
        }catch(Exception ex){
            System.out.println("Problem in inserting cortar llamada");
        }
        callAndVideoCallDialog.setVisible(false);
        /*mainDialog.pack();
        mainDialog.setModal(true);
        mainDialog.setLocationRelativeTo(this);
        mainDialog.setVisible(true);*/
    }//GEN-LAST:event_finishCallBtnMouseClicked

    private void messageBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageBtnMouseClicked
        // TODO add your handling code here:
        DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
        DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        try{
            
            st = conexion.createStatement();

            String sql = "INSERT INTO actions (username,command,date,time) "
               + "VALUES ('"+username +"', 'mandar mensaje', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();
        }catch(Exception ex){
            System.out.println("Problem in inserting mandar mensaje");
        }
        smsDialog.setVisible(false);
        /*mainDialog.pack();
        mainDialog.setModal(true);
        mainDialog.setLocationRelativeTo(this);
        mainDialog.setVisible(true);*/
    }//GEN-LAST:event_messageBtnMouseClicked

    private void closeContactBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeContactBtnMouseClicked
        // TODO add your handling code here:
        DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
        DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        try{
            
            st = conexion.createStatement();

            String sql = "INSERT INTO actions (username,command,date,time) "
               + "VALUES ('"+username +"', 'buscar contacto', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();
            
        }catch(Exception ex){
            System.out.println("Problem in inserting buscar contacto");
        }finally{
            try {
                if (pst != null) {
                    pst.close();
                }

            } catch (SQLException ex) {
                System.out.println("problema cerrando pst");
            }
        }
        contactDialog.setVisible(false);
        /*mainDialog.pack();
        mainDialog.setModal(true);
        mainDialog.setLocationRelativeTo(this);
        mainDialog.setVisible(true);*/
    }//GEN-LAST:event_closeContactBtnMouseClicked

    private void closeEditContactBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeEditContactBtnMouseClicked
        // TODO add your handling code here:
        editContactDialog.setVisible(false);
    }//GEN-LAST:event_closeEditContactBtnMouseClicked

    private void loginExitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginExitBtnMouseClicked
        // TODO add your handling code here:
        try {
            if (conexion != null) {
                conexion.close();
            }
            System.out.println("Connection closed");
            this.setVisible(false);
            System.exit(0);
        } catch (Exception ex) {
            System.out.println("Problem to close the connection to the database");
        }
    }//GEN-LAST:event_loginExitBtnMouseClicked

    private void loginExitMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginExitMicBtnMouseClicked
        // TODO add your handling code here:
         //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            System.out.println("problem starting recognizer");
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("SALIR") || command.contains("CERRAR")) {
                recognize.stopRecognition();
                System.out.println(command);
                try {
                    if (pst != null) {
                        pst.close();
                    }
                    if (conexion != null) {
                        conexion.close();
                    }
                    System.out.println("Connection closed");
                    this.setVisible(false);
                    System.exit(0);
                } catch (Exception ex) {
                    System.out.println("Problem to close the connection to the database");
                }
                recognize.startRecognition(true);
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_loginExitMicBtnMouseClicked

    private void newContactMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newContactMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("CREAR") || command.contains("SALVAR")) {
                recognize.stopRecognition();
                selectedUsername = contactsLst.getSelectedValue();
        
                DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
                DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
                Calendar cal = Calendar.getInstance();
                try{

                    st = conexion.createStatement();

                    String sql = "INSERT INTO actions (username,command,date,time) "
                       + "VALUES ('"+username +"', 'nuevo contacto', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();

                }catch(Exception ex){
                    System.out.println("Problem inserting nuevo contacto into the database");
                }

                String name = newContactFnTf.getText();
                String lastName = newContactLnTf.getText();
                String phoneNumber = newContactNoTf.getText();
                String user = name + lastName;
                String pass = "123" + name;
                try{
                    
                    st = conexion.createStatement();

                    String sql = "INSERT INTO users (username, password, name, lastname, phonenumber) "
                       + "VALUES ('"+user+"', '"+pass+"', '"+name+"', '"+lastName+"', '"+phoneNumber +"');";

                    st.executeUpdate(sql);
                    
                    st.close();
                    conexion.commit();

                }catch(Exception ex){
                    System.out.println("Problem inserting user into the database");
                }finally{
                    try {
                        if (pst != null) {
                            pst.close();
                        }

                    } catch (SQLException ex) {
                        System.out.println("problema cerrando pst");
                    }
                }
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_newContactMicBtnMouseClicked

    private void newContactFnMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newContactFnMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;
        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command != null) {
                recognize.stopRecognition();
                newContactFnTf.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_newContactFnMicBtnMouseClicked

    private void newContactLnMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newContactLnMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;
        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command != null) {
                recognize.stopRecognition();
                newContactLnTf.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_newContactLnMicBtnMouseClicked

    private void newContactNoMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newContactNoMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;
        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command != null) {
                recognize.stopRecognition();
                newContactNoTf.setText(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_newContactNoMicBtnMouseClicked

    private void closeNewContactBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeNewContactBtnMouseClicked
        // TODO add your handling code here:
        newContactDialog.setVisible(false);
    }//GEN-LAST:event_closeNewContactBtnMouseClicked

    private void closeNewContactMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeNewContactMicBtnMouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("SALIR") || command.contains("CERRAR")) {
                recognize.stopRecognition();
                newContactDialog.setVisible(false);
                /*mainDialog.pack();
                mainDialog.setModal(true);
                mainDialog.setLocationRelativeTo(this);
                mainDialog.setVisible(true);*/
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_closeNewContactMicBtnMouseClicked

    private void newEditContactBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newEditContactBtnMouseClicked
        // TODO add your handling code here:
        selectedUsername = contactsLst.getSelectedValue();
        DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
        DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        try{
            
            st = conexion.createStatement();

            String sql = "INSERT INTO actions (username,command,date,time) "
               + "VALUES ('"+username +"', 'editar contacto', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();
            
        }catch(Exception ex){
            System.out.println("Problem inserting editar contacto into the database");
        }finally{
            try {
                if (pst != null) {
                    pst.close();
                }

            } catch (SQLException ex) {
                System.out.println("problema cerrando pst");
            }
        }
        
        String name = editContactFnTa.getText();
        String lastName = editContactLnTa.getText();
        String phoneNumber = editContactNoTa.getText();
        String user = name + lastName;
        String pass = "123" + name;
        try{
            
            st = conexion.createStatement();

            String sql = "INSERT INTO users (username, password, name, lastname, phonenumber) "
               + "VALUES ('"+user+"', '"+pass+"', '"+name+"', '"+lastName+"', '"+phoneNumber +"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();
            
        }catch(Exception ex){
            System.out.println("Problem inserting user into the database");
        }finally{
            try {
                if (pst != null) {
                    pst.close();
                }

            } catch (SQLException ex) {
                System.out.println("problema cerrando pst");
            }
        }
        
    }//GEN-LAST:event_newEditContactBtnMouseClicked

    private void newContactBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newContactBtnMouseClicked
        // TODO add your handling code here:
        selectedUsername = contactsLst.getSelectedValue();
        
        DateFormat ddf = new SimpleDateFormat("yyyy/MM/dd");
        DateFormat tdf = new SimpleDateFormat("HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        try{
            st = conexion.createStatement();

            String sql = "INSERT INTO actions (username,command,date,time) "
               + "VALUES ('"+username +"', 'nuevo contacto', '"+ddf.format(cal.getTime())+"', '"+tdf.format(cal.getTime())+"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();

        }catch(Exception ex){
            System.out.println("Problem inserting nuevo contacto into the database");
        }finally{
            try {
                if (pst != null) {
                    pst.close();
                }

            } catch (SQLException ex) {
                System.out.println("problema cerrando pst");
            }
        }
        
        String name = newContactFnTf.getText();
        String lastName = newContactLnTf.getText();
        String phoneNumber = newContactNoTf.getText();
        String user = name + lastName;
        String pass = "123" + name;
        try{
            
            st = conexion.createStatement();

            String sql = "INSERT INTO users (username, password, name, lastname, phonenumber) "
               + "VALUES ('"+user+"', '"+pass+"', '"+name+"', '"+lastName+"', '"+phoneNumber +"');";

            st.executeUpdate(sql);

            st.close();
            conexion.commit();
            
        }catch(Exception ex){
            System.out.println("Problem inserting user into the database");
        }finally{
            try {
                if (pst != null) {
                    pst.close();
                }

            } catch (SQLException ex) {
                System.out.println("problema cerrando pst");
            }
        }
        
    }//GEN-LAST:event_newContactBtnMouseClicked

    private void loginPassMicBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPassMicBtnMouseClicked
        // TODO add your handling code here:
        try{
            st = conexion.createStatement();
            
            rs = st.executeQuery("SELECT password FROM users");
            
            //Recognizer Object, Pass the Configuration object\
            try {
                recognize = new LiveSpeechRecognizer(configuration);
            } catch (IOException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("problem starting recognizer");
            }

            //Start Recognition Process (The bool parameter clears the previous cache if true)
            recognize.startRecognition(true);
            System.out.println("DECIR COMANDO");
            String command = null;
            while (true) {
                //Get the recognize speech
                result = recognize.getResult();
                System.out.println("Aquiiii");
                command = result.getHypothesis();
                if (command != null) {
                    recognize.stopRecognition();
                    while(rs.next()){
                        String ps = rs.getString("password");
                        if (command.equalsIgnoreCase(ps) || command.equalsIgnoreCase("pass") || command.equalsIgnoreCase("password")) {
                            //recognize.stopRecognition();
                            passLoginPF.setText(ps);
                            JOptionPane.showMessageDialog(this, "Contraseña correcta");
                            break;
                        }else{
                            passLoginPF.setText(command);
                            JOptionPane.showMessageDialog(this, "Contraseña incorrecta" + command.toLowerCase());
                            break;
                        }
                    }
                    recognize.startRecognition(true);
                    break;
                }
            }
            recognize.stopRecognition();
            System.out.println("TERMINO DE ESCUCHAR");
            
        }catch(SQLException | HeadlessException ex){
            System.out.println("Problem in searching the database login");
        }
    }//GEN-LAST:event_loginPassMicBtnMouseClicked

    private void closeNewContactBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeNewContactBtn1MouseClicked
        // TODO add your handling code here:
        mailDialog.setVisible(false);
    }//GEN-LAST:event_closeNewContactBtn1MouseClicked

    private void closeNewContactMicBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeNewContactMicBtn1MouseClicked
        // TODO add your handling code here:
        //Recognizer Object, Pass the Configuration object\
        try {
            recognize = new LiveSpeechRecognizer(configuration);
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("problem starting recognizer");
        }

        //Start Recognition Process (The bool parameter clears the previous cache if true)
        recognize.startRecognition(true);
        System.out.println("DECIR COMANDO");
        String command = null;

        while (true) {
            //Get the recognize speech
            result = recognize.getResult();
            System.out.println("Aquiiii");
            command = result.getHypothesis();
            if (command.contains("SALIR") || command.contains("CERRAR")) {
                recognize.stopRecognition();
                mailDialog.setVisible(false);
                recognize.startRecognition(true);
                break;
            }else{
                recognize.stopRecognition();
                System.out.println(command);
                recognize.startRecognition(true);
                break;
            }
        }
        recognize.stopRecognition();
        System.out.println("TERMINO DE ESCUCHAR");
    }//GEN-LAST:event_closeNewContactMicBtn1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
                
                try{
                    Class.forName("org.postgresql.Driver");
                    conexion = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "");
                    conexion.setAutoCommit(false);
                    if (conexion != null) {
                        System.out.println("Connecting to database...");
                    }
                } catch (Exception e) {
                    System.err.println("Problem connecting to database: " + e);
                }
                
                // Configuration Object
                configuration = new Configuration();
                
                // Set path to the acoustic model.
                configuration.setAcousticModelPath("resource:/edu/cmu/sphinx/models/en-us/en-us");
                // Set path to the dictionary.
                //configuration.setDictionaryPath("resource:/edu/cmu/sphinx/models/en-us/cmudict-en-us.dict");
                configuration.setDictionaryPath("src/proyectofinal/grammar.dic");
                // Set path to the language model.
                //configuration.setLanguageModelPath("resource:/edu/cmu/sphinx/models/en-us/en-us.lm.bin");
                configuration.setLanguageModelPath("src/proyectofinal/grammar.lm");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog callAndVideoCallDialog;
    private javax.swing.JLabel callLbl;
    private javax.swing.JLabel callTitleFnLbl;
    private javax.swing.JLabel callTitleLnLbl;
    private javax.swing.JButton closeContactBtn;
    private javax.swing.JButton closeContactMicBtn;
    private javax.swing.JButton closeEditContactBtn;
    private javax.swing.JButton closeEditContactMicBtn;
    private javax.swing.JButton closeNewContactBtn;
    private javax.swing.JButton closeNewContactBtn1;
    private javax.swing.JButton closeNewContactMicBtn;
    private javax.swing.JButton closeNewContactMicBtn1;
    private javax.swing.JLabel cmmndLbl;
    private javax.swing.JList<String> cmmndLst;
    private javax.swing.JDialog contactDialog;
    private javax.swing.JLabel contactFnTitleLbl;
    private javax.swing.JLabel contactLnTitleLbl;
    private javax.swing.JLabel contactLnTitleLbl2;
    private javax.swing.JLabel contactNoTitleLbl;
    private javax.swing.JLabel contactNumberTitleLbl;
    private javax.swing.JLabel contactsLbl;
    private javax.swing.JList<String> contactsLst;
    private javax.swing.JTextField deTF;
    private javax.swing.JButton editContacLnMicBtn;
    private javax.swing.JDialog editContactDialog;
    private javax.swing.JButton editContactFnMicBtn;
    private javax.swing.JTextField editContactFnTa;
    private javax.swing.JLabel editContactFnTitleLbl;
    private javax.swing.JTextField editContactLnTa;
    private javax.swing.JButton editContactNoMicBtn;
    private javax.swing.JTextField editContactNoTa;
    private javax.swing.JLabel editContactNoTitleLbl;
    private javax.swing.JLabel editLbl;
    private javax.swing.JButton finishCallBtn;
    private javax.swing.JButton finishCallMicBtn;
    private javax.swing.JLabel imageCallLbl;
    private javax.swing.JLabel imageContactLbl;
    private javax.swing.JLabel imageContactLbl1;
    private javax.swing.JLabel imageNewContactLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton loginExitBtn;
    private javax.swing.JButton loginExitMicBtn;
    private javax.swing.JButton loginMicBtn;
    private javax.swing.JButton loginNameMicBtn;
    private javax.swing.JButton loginPassMicBtn;
    private javax.swing.JLabel loginTitleLbl;
    private javax.swing.JDialog mailDialog;
    private javax.swing.JTable mailTbl;
    private javax.swing.JDialog mainDialog;
    private javax.swing.JButton mainExitBtn;
    private javax.swing.JButton mainExitMicBtn;
    private javax.swing.JButton mainMicBtn;
    private javax.swing.JLabel mainTitleLbl;
    private javax.swing.JButton messageBtn;
    private javax.swing.JButton messageCntMicBtn;
    private javax.swing.JLabel messageFnLbl;
    private javax.swing.JLabel messageLnLbl;
    private javax.swing.JButton messageMicBtn;
    private javax.swing.JTextArea messageTA;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameLoginTF;
    private javax.swing.JButton newContactBtn;
    private javax.swing.JDialog newContactDialog;
    private javax.swing.JButton newContactFnMicBtn;
    private javax.swing.JTextField newContactFnTf;
    private javax.swing.JLabel newContactFnTitleLbl;
    private javax.swing.JButton newContactLnMicBtn;
    private javax.swing.JTextField newContactLnTf;
    private javax.swing.JButton newContactMicBtn;
    private javax.swing.JButton newContactNoMicBtn;
    private javax.swing.JTextField newContactNoTf;
    private javax.swing.JLabel newContactNoTitleLbl;
    private javax.swing.JButton newEditContactBtn;
    private javax.swing.JButton newEditContactMicBtn;
    private javax.swing.JLabel newLbl;
    private javax.swing.JLabel newcontactLnTitleLbl;
    private javax.swing.JTextField paraTF;
    private javax.swing.JLabel passLbl;
    private javax.swing.JPasswordField passLoginPF;
    private javax.swing.JDialog smsDialog;
    private javax.swing.JLabel toDoLbl;
    private javax.swing.JTextField toDoTF;
    // End of variables declaration//GEN-END:variables
    private static Configuration configuration = null;
    private static LiveSpeechRecognizer recognize = null;
    private static SpeechResult result = null;
    private static Connection conexion = null;
    private static ResultSet rs = null;
    private static Statement st = null;
    private static PreparedStatement pst = null;
    private static String username = null;
    private static String selectedUsername = null;
}
